name: Build wheel

on:
  workflow_call:
    secrets:
      jupyterhub_user:
        required: true
      vlab_slug:
        required: true
      cell_github:
        required: true
      cell_github_token:
        required: true
      api_endpoint:
        required: true
      module_mapping_url:
        required: true
      search_api_endpoint:
        required: true
      search_api_token:
        required: true
      registry_url:
        required: true
      naavre_api_token:
        required: true
      argo_url:
        required: true
      argo_api_token:
        required: true

env:
  CELL_GITHUB: ${{ secrets.cell_github }}
  CELL_GITHUB_TOKEN: ${{ secrets.cell_github_token }}
  REGISTRY_URL: ${{ secrets.registry_url }}
  NAAVRE_API_TOKEN: ${{ secrets.naavre_api_token }}
  JUPYTERHUB_USER: ${{ secrets.jupyterhub_user }}
  API_ENDPOINT: ${{ secrets.api_endpoint }}
  VLAB_SLUG: ${{ secrets.vlab_slug }}
  MODULE_MAPPING_URL: ${{ secrets.module_mapping_url }}
  SEARCH_API_ENDPOINT: ${{ secrets.search_api_endpoint }}
  SEARCH_API_TOKEN: ${{ secrets.search_api_token }}
  ARGO_URL: ${{ secrets.ARGO_URL }}
  ARGO_API_TOKEN: ${{ secrets.ARGO_API_TOKEN }}
  ASYNC_TEST_TIMEOUT: 30


jobs:
  build-linux:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
    steps:
      - name: Check secrets
        run: |
          vars_not_set=0
          concatenated_error_message=""
          if [ -z "$CELL_GITHUB" ]; then
            echo "CELL_GITHUB not set"
            concatenated_error_message="$concatenated_error_message CELL_GITHUB not set"
            vars_not_set=1
          fi
          if [ -z "$CELL_GITHUB_TOKEN" ]; then
            echo "CELL_GITHUB_TOKEN not set"
            concatenated_error_message="$concatenated_error_message CELL_GITHUB_TOKEN not set"
            vars_not_set=1
          fi
          if [ -z "$REGISTRY_URL" ]; then
            echo "REGISTRY_URL not set"
            concatenated_error_message="$concatenated_error_message REGISTRY_URL not set"
            vars_not_set=1
          fi
          if [ -z "$NAAVRE_API_TOKEN" ]; then
            echo "NAAVRE_API_TOKEN not set"
            concatenated_error_message="$concatenated_error_message NAAVRE_API_TOKEN not set"
            vars_not_set=1
          fi
          if [ -z "$JUPYTERHUB_USER" ]; then
            echo "JUPYTERHUB_USER not set"
            concatenated_error_message="$concatenated_error_message JUPYTERHUB_USER not set"
            vars_not_set=1
          fi
          if [ -z "$API_ENDPOINT" ]; then
            echo "API_ENDPOINT not set"
            concatenated_error_message="$concatenated_error_message API_ENDPOINT not set"
            vars_not_set=1
          fi
          if [ -z "$VLAB_SLUG" ]; then
            echo "VLAB_SLUG not set"
            concatenated_error_message="$concatenated_error_message VLAB_SLUG not set"
            vars_not_set=1
          fi
          if [ -z "$MODULE_MAPPING_URL" ]; then
            echo "MODULE_MAPPING_URL not set"
            concatenated_error_message="$concatenated_error_message MODULE_MAPPING_URL not set"
            vars_not_set=1
          fi
          if [ -z "$SEARCH_API_ENDPOINT" ]; then
            echo "SEARCH_API_ENDPOINT not set"
            concatenated_error_message="$concatenated_error_message SEARCH_API_ENDPOINT not set"
            vars_not_set=1
          fi
          if [ -z "$SEARCH_API_TOKEN" ]; then
            echo "SEARCH_API_TOKEN not set"
            concatenated_error_message="$concatenated_error_message SEARCH_API_TOKEN not set"
            vars_not_set=1
          fi
          if [ -z "ARGO_URL" ]; then
            echo "ARGO_URL not set"
            concatenated_error_message="$concatenated_error_message ARGO_URL not set"
            vars_not_set=1
          fi
          if [ -z "ARGO_API_TOKEN" ]; then
            echo "ARGO_API_TOKEN not set"
            concatenated_error_message="$concatenated_error_message ARGO_API_TOKEN not set"
            vars_not_set=1
          fi
          if [ $vars_not_set -eq 1 ]; then
            echo "Exiting with error"
            echo $concatenated_error_message
            exit 1
          fi

      - uses: actions/checkout@v4

      - uses: conda-incubator/setup-miniconda@v2
        with:
          auto-update-conda: true
          miniforge-version: latest
          miniforge-variant: Mambaforge
          python-version: 3.9
          path: ${{ env.CONDA }}/envs
          environment-file: environment.yml
          activate-environment: jupyterlab
          use-mamba: true

#      - name: Cache Conda environment
#        uses: actions/cache@v2
#        with:
#          path: ${{ env.CONDA }}/envs
#          key: conda-environment-${{ runner.os }}-${{ hashFiles('environment.yml') }}
#          restore-keys: |
#            conda-environment-${{ runner.os }}-
#        id: cache-conda
#
#      - name: Update environment
#        if: steps.cache-conda.outputs.cache-hit != 'true'
#        run:
#          mamba env update -n jupyterlab -f environment.yml
#
#      - name: Lint with flake8
#        shell: bash -l {0}
#        run: |
#          conda activate jupyterlab
#          # stop the build if there are Python syntax errors or undefined names
#          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
#          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
#          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics


      - name: Download helm and k8s files
        shell: bash -l {0}
        run: |
          # Get argo
          mkdir -p helm_config/argo
          wget https://raw.githubusercontent.com/QCDIS/NaaVRE-dev-environment/main/helm_config/argo/argo-sso-secret.yaml -P helm_config/argo
          wget https://raw.githubusercontent.com/QCDIS/NaaVRE-dev-environment/main/helm_config/argo/auth-vre-api.yaml -P helm_config/argo
          wget https://raw.githubusercontent.com/QCDIS/NaaVRE-dev-environment/main/helm_config/argo/values.yaml -P helm_config/argo
          # Get keycloak
          mkdir -p helm_config/keycloak
          wget https://raw.githubusercontent.com/QCDIS/NaaVRE-dev-environment/main/helm_config/keycloak/values.yaml -P helm_config/keycloak
          # Get vrepaas
          mkdir -p helm_config/vrepaas
          wget https://raw.githubusercontent.com/QCDIS/NaaVRE-dev-environment/main/helm_config/vrepaas/values.yaml -P helm_config/vrepaas

      - name: Start minikube
        uses: medyagh/setup-minikube@v0.0.14
        with:
          addons: ingress, ingress-dns

      - name: Try the cluster!
        shell: bash -l {0}
        run: |
          helm version
          kubectl get pods -A

      - name: Setup Ingress DNS
        shell: bash -l {0}
        run: |
          minikube ip
          echo "$MINIKUBE_IP"
          sudo mkdir /etc/systemd/resolved.conf.d
          tee /etc/systemd/resolved.conf.d/minikube.conf << EOF
          [Resolve]
          DNS=$(minikube ip)
          Domains=~test
          EOF
          systemctl restart systemd-resolved

      - name: Deploy argo
        shell: bash -l {0}
        run: |
          kubectl apply -f helm_config/argo/argo-sso-secret.yaml
          kubectl apply -f helm_config/argo/auth-vre-api.yaml
          helm repo add argo https://argoproj.github.io/argo-helm
          helm repo update
          helm install argo-workflows argo/argo-workflows -f helm_config/argo/values.yaml
          kubectl get all


#      - name: pytest
#        shell: bash -l {0}
#        run: |
#          conda activate jupyterlab
#          python docker/repo_utils/conf_vl_repos.py  --force=True
#          pip install --upgrade build
#          pytest --ignore=docker --ignore=cypress
#
#      - name: make release
#        shell: bash -el {0}
#        run: make release
#
#      - name: 'Upload wheel artifact'
#        uses: actions/upload-artifact@v3
#        with:
#          name: jupyterlab_vre
#          path: dist/jupyterlab_vre-0.1.0-py3-none-any.whl
