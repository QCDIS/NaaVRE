name: Build container

on:
  workflow_call:
    inputs:
      docker_folder:
        required: true
        type: string
      tag:
        required: true
        type: string
      wheel_artifact_name:
        required: true
        type: string
      push:
        required: true
        type: boolean
    secrets:
      gitlab_username:
        required: true
      gitlab_password:
        required: true
      docker_username:
        required: true
      docker_password:
        required: true
env:
  DOCKER_FOLDER:  ${{ inputs.docker_folder }}
  TAG:  ${{ inputs.tag }}
  GITLAB_IMAGE_ID: "registry.gitlab.com/qcd1/registry/"
  DOCKERHUB_IMAGE_ID: "qcdis/"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Download artifact
      uses: actions/download-artifact@v3
      with:
        name: ${{ inputs.wheel_artifact_name }}
        path: docker/${{ inputs.docker_folder }}
    - uses: mikefarah/yq@v4.35.2

    - name: add whl and start files
      run: |
          cp docker/init_script.sh docker/$DOCKER_FOLDER/
          cp docker/start-jupyter.sh docker/$DOCKER_FOLDER/
          cp docker/start-jupyter.sh docker/$DOCKER_FOLDER/
          cp docker/start-jupyter-venv.sh docker/$DOCKER_FOLDER/
          cp -r docker/repo_utils docker/$DOCKER_FOLDER/repo_utils
          cp environment.yml docker/$DOCKER_FOLDER/
          mv docker/$DOCKER_FOLDER/environment.yml docker/$DOCKER_FOLDER/naa-vre-environment.yaml
          echo '' >> docker/$DOCKER_FOLDER/naa-vre-environment.yaml
          echo '  - pip:' >> docker/$DOCKER_FOLDER/naa-vre-environment.yaml
          yq '.dependencies[-1].pip += ["/home/jovyan/jupyterlab_vre-0.1.0-py3-none-any.whl"]' docker/$DOCKER_FOLDER/naa-vre-environment.yaml -i
          if test -f "docker/$DOCKER_FOLDER/environment.yaml"; then yq 'del(.channels[] | select(. == "defaults"))' docker/$DOCKER_FOLDER/environment.yaml -i; fi
          yq 'del(.channels[] | select(. == "defaults"))' docker/$DOCKER_FOLDER/naa-vre-environment.yaml -i


    - name: Login to github Registry
      if: ${{ inputs.push }}
      uses: docker/login-action@v3
      with:
        registry: "https://index.docker.io/v1/"
        username: ${{ secrets.docker_username }}
        password: ${{ secrets.docker_password }}


    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build docker
      uses: docker/build-push-action@v5
      with:
        context: docker/${{ inputs.docker_folder }}
        push: ${{ inputs.push }}
        tags: qcdis/${{ inputs.tag | replace('refs/tags/', '') }}:${{ github.ref }}
        cache-from: type=gha
        cache-to: type=gha,mode=min


#    - name: Build docker
#      run: |
#          cd docker/$DOCKER_FOLDER && docker build . --file Dockerfile -t $TAG


#    - name: Push image to container Registry
#      if: ${{ inputs.push }}
#      run: |
#        # Change all uppercase to lowercase
#        IMAGE_ID=$GITLAB_IMAGE_ID$TAG
#        IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
#        # Strip git ref prefix from version
#        VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
#        echo IMAGE_ID=$IMAGE_ID
#        echo VERSION=$VERSION
#        docker tag $TAG:latest $IMAGE_ID:$VERSION
#        if [ "${{ secrets.gitlab_password }}" != '' ]; then
#          docker push $IMAGE_ID:$VERSION
#          docker tag $TAG $IMAGE_ID:latest
#          docker push $IMAGE_ID:latest
#        fi
#
#
#
#    - name: Push image to container Registry
#      if: ${{ inputs.push }}
#      run: |
#        # Change all uppercase to lowercase
#        IMAGE_ID=$DOCKERHUB_IMAGE_ID$TAG
#        IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
#        # Strip git ref prefix from version
#        VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
#        echo IMAGE_ID=$IMAGE_ID
#        echo VERSION=$VERSION
#        dokcer images
#        docker tag $TAG $IMAGE_ID:$VERSION
#        if [ "${{ secrets.docker_password }}" != '' ]; then
#          docker push $IMAGE_ID:$VERSION
#          docker tag $TAG $IMAGE_ID:latest
#          docker push $IMAGE_ID:latest
#        fi
#
