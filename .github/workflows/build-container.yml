name: Build container

on:
  workflow_call:
    inputs:
      docker_folder:
        required: true
        type: string
      tag:
        required: true
        type: string
      wheel_artifact_name:
        required: true
        type: string
      push:
        required: true
        type: boolean
    secrets:
      gitlab_username:
        required: true
      gitlab_password:
        required: true
      docker_username:
        required: true
      docker_password:
        required: true
      jupyterhub_user:
        required: true
      vlab_slug:
        required: true
      cell_github:
        required: true
      cell_github_token:
        required: true
      api_endpoint:
        required: true
      module_mapping_url:
        required: true
      search_api_endpoint:
        required: true
      search_api_token:
        required: true
      registry_url:
        required: true
      naavre_api_token:
        required: true
      argo_url:
        required: true
      argo_api_token:
        required: true
env:
  DOCKER_FOLDER:  ${{ inputs.docker_folder }}
  TAG:  ${{ inputs.tag }}
  GITLAB_IMAGE_ID: "registry.gitlab.com/qcd1/registry/"
  DOCKERHUB_IMAGE_ID: "qcdis/"
  CELL_GITHUB: ${{ secrets.cell_github }}
  CELL_GITHUB_TOKEN: ${{ secrets.cell_github_token }}
  REGISTRY_URL: ${{ secrets.registry_url }}
  NAAVRE_API_TOKEN: ${{ secrets.naavre_api_token }}
  JUPYTERHUB_USER: ${{ secrets.jupyterhub_user }}
  API_ENDPOINT: ${{ secrets.api_endpoint }}
  VLAB_SLUG: ${{ secrets.vlab_slug }}
  MODULE_MAPPING_URL: ${{ secrets.module_mapping_url }}
  SEARCH_API_ENDPOINT: ${{ secrets.search_api_endpoint }}
  SEARCH_API_TOKEN: ${{ secrets.search_api_token }}
  ARGO_URL: ${{ secrets.ARGO_URL }}
  ARGO_API_TOKEN: ${{ secrets.ARGO_API_TOKEN }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Download artifact
      uses: actions/download-artifact@v3
      with:
        name: ${{ inputs.wheel_artifact_name }}
        path: docker/${{ inputs.docker_folder }}
    - uses: mikefarah/yq@v4.34.1

    - name: add whl and start files
      run: |
          cp docker/init_script.sh docker/$DOCKER_FOLDER/
          cp docker/start-jupyter.sh docker/$DOCKER_FOLDER/
          cp docker/start-jupyter.sh docker/$DOCKER_FOLDER/
          cp docker/start-jupyter-venv.sh docker/$DOCKER_FOLDER/
          cp -r docker/repo_utils docker/$DOCKER_FOLDER/repo_utils
          cp environment.yml docker/$DOCKER_FOLDER/
          mv docker/$DOCKER_FOLDER/environment.yml docker/$DOCKER_FOLDER/naa-vre-environment.yaml
          yq '.dependencies[-1].pip += ["/home/jovyan/jupyterlab_vre-0.1.0-py3-none-any.whl"]' docker/$DOCKER_FOLDER/naa-vre-environment.yaml -i
          if test -f "docker/$DOCKER_FOLDER/environment.yaml"; then yq 'del(.channels[] | select(. == "defaults"))' docker/$DOCKER_FOLDER/environment.yaml -i; fi
          yq 'del(.channels[] | select(. == "defaults"))' docker/$DOCKER_FOLDER/naa-vre-environment.yaml -i


    - name: Build docker
      run: |
          cd docker/$DOCKER_FOLDER && docker build . --file Dockerfile -t $TAG


    - name: Save environment variables in a file
      run: |
          echo $CELL_GITHUB > env_vars.txt
          echo $CELL_GITHUB_TOKEN >> env_vars.txt
          echo $REGISTRY_URL >> env_vars.txt
          echo $NAAVRE_API_TOKEN >> env_vars.txt
          echo $JUPYTERHUB_USER >> env_vars.txt
          echo $API_ENDPOINT >> env_vars.txt
          echo $VLAB_SLUG >> env_vars.txt
          echo $MODULE_MAPPING_URL >> env_vars.txt
          echo $SEARCH_API_ENDPOINT >> env_vars.txt
          echo $SEARCH_API_TOKEN >> env_vars.txt
          echo $ARGO_URL >> env_vars.txt
          echo $ARGO_API_TOKEN >> env_vars.txt


    - name: Start docker
      run: |
          docker run -d -p 8888:8888 --env-file env_vars.txt $TAG:latest /bin/bash -c "source /venv/bin/activate && /tmp/init_script.sh && jupyter lab --debug --watch --NotebookApp.token='' --NotebookApp.ip='0.0.0.0' --NotebookApp.allow_origin='*'"
          sleep 5

    - name: Check if jupyter is running
      run: |
          curl -s http://localhost:8888/lab | grep -q "JupyterLab"
          if [ $? -ne 0 ]; then
            echo "JupyterLab is not running"
            exit 1
          fi

    - name: Cypress run
      uses: cypress-io/github-action@v5


    - name: Login to gitlab Registry
      if: ${{ inputs.push }}
      uses: docker/login-action@v2
      with:
        registry: "registry.gitlab.com/qcd1/registry"
        username: ${{ secrets.gitlab_username }}
        password: ${{ secrets.gitlab_password }}
    - name: Push image to container Registry
      if: ${{ inputs.push }}
      run: |
        # Change all uppercase to lowercase
        IMAGE_ID=$GITLAB_IMAGE_ID$TAG
        IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
        # Strip git ref prefix from version
        VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
        echo IMAGE_ID=$IMAGE_ID
        echo VERSION=$VERSION
        docker tag $TAG $IMAGE_ID:$VERSION
        if [ "${{ secrets.gitlab_password }}" != '' ]; then
          docker push $IMAGE_ID:$VERSION
          docker tag $TAG $IMAGE_ID:latest
          docker push $IMAGE_ID:latest
        fi


    - name: Login to github Registry
      if: ${{ inputs.push }}
      uses: docker/login-action@v2
      with:
        registry: "https://index.docker.io/v1/"
        username: ${{ secrets.docker_username }}
        password: ${{ secrets.docker_password }}
    - name: Push image to container Registry
      if: ${{ inputs.push }}
      run: |
        # Change all uppercase to lowercase
        IMAGE_ID=$DOCKERHUB_IMAGE_ID$TAG
        IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
        # Strip git ref prefix from version
        VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
        echo IMAGE_ID=$IMAGE_ID
        echo VERSION=$VERSION
        docker tag $TAG $IMAGE_ID:$VERSION
        if [ "${{ secrets.docker_password }}" != '' ]; then
          docker push $IMAGE_ID:$VERSION
          docker tag $TAG $IMAGE_ID:latest
          docker push $IMAGE_ID:latest
        fi
