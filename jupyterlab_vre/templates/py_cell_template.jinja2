{% if deps|length >0 %}
{% for d in deps %}
{{ d }}
{% endfor %}
{% endif %}

import argparse
import json
import os
arg_parser = argparse.ArgumentParser()

{%  for secret in cell.secrets|sort %}
{{ secret }} = os.getenv('{{ secret }}')
{% endfor %}

arg_parser.add_argument('--id', action='store', type=str, required=True, dest='id')

{% for in_var in cell.inputs|sort %}

{% if types[in_var] == list  or types[in_var] == 'list' %}
arg_parser.add_argument('--{{ in_var }}', action='store', type=str, required=True, dest='{{ in_var }}')
{% else %}
arg_parser.add_argument('--{{ in_var }}', action='store', type={{ types[in_var] }}, required=True, dest='{{ in_var }}')
{% endif %}
{% endfor %}

{% for param in cell.params|sort %}
{% if types[param] == list  or types[param] == 'list' %}
arg_parser.add_argument('--{{ param }}', action='store', type=str, required=True, dest='{{ param }}')
{% else %}
arg_parser.add_argument('--{{ param }}', action='store', type={{ types[param] }}, required=True, dest='{{ param }}')
{% endif %}
{% endfor %}

args = arg_parser.parse_args()
print(args)

id = args.id

{% for in_var in cell.inputs|sort %}
{% if types[in_var] == list  or types[in_var] == 'list' %}
{{ in_var }} = json.loads(args.{{ in_var }})
{% elif types[in_var] == str or  types[in_var] == 'str' %}
{{ in_var }} = args.{{ in_var }}.replace('"','')
{% else %}
{{ in_var }} = args.{{ in_var }}
{% endif %}
{% endfor %}

{% for param in cell.params|sort %}
{% if types[param] == list  or types[param] == 'list' %}
print(args.{{ param }})
print(type(args.{{ param }}))
try:
    {{ param }} = json.loads(args.{{ param }})
except Exception as e:
    if e.__class__.__name__ == 'JSONDecodeError':
        import ast
        {{ param }} = ast.literal_eval(args.{{ param }}.replace('[','["').replace(',','","').replace('" ','"').replace(']','"]').replace("'",""))
    else:
        raise e
{% elif types[param] == dict  or types[param] == 'dict' %}
{{ param }} = json.loads(args.{{ param }})
{% elif types[param] == str or  types[param] == 'str' %}
{{ param }} = args.{{ param }}.replace('"','')
{% else %}
{{ param }} = args.{{ param }}
{% endif %}
{% endfor %}

{% for c in confs %}
{% for c_name in c %}
{{ c_name }} = {{ c[c_name] }}
{% endfor %}

{% endfor %}

{{ cell.original_source }}

{% if cell.outputs|length > 0 %}
{% for out in cell.outputs %}
file_{{out}} = open("/tmp/{{out}}_" + id + ".json", "w")
file_{{out}}.write(json.dumps({{out}}))
file_{{out}}.close()
{% endfor %}
{% endif %}