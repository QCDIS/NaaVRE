apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: {{ workflow_name }}-
  labels:
    vlab_slug: {{ vlab_slug }}
spec:
    entrypoint: {{ workflow_name }}
    serviceAccountName: {{ workflow_service_account }}
    volumeClaimTemplates:
    - metadata:
        name: workdir
      spec:
        accessModes: [ "ReadWriteMany" ]
        resources:
          requests:
            storage: {{ workdir_storage_size }}Gi
    arguments:
      parameters:
      {% for p, value in global_params.items() %}
      - name: {{ p }}
        value: {{ value }}
      {% endfor %}
    templates:
    - name: {{ workflow_name }}
      dag:
        tasks:
        {% for nid in nodes %}
        {% set is_special_node = nodes[nid]['type'] == 'splitter' or nodes[nid]['type'] == 'merger' or nodes[nid]['type'] == 'visualizer' %}
        {% set is_splitter = nodes[nid]['type'] == 'splitter' %}
        {% set is_visualizer = nodes[nid]['type'] == 'visualizer' %}
        {% set task_name =  nodes[nid]['type'] + "-" + nid[:7] if is_special_node else cells[nid]['task_name']+ "-" + nid[:7] %}
        {% set params =  [] if is_special_node else cells[nid]['params'] %}
        {# {% if 'visualize-' in task_name %}
        - name: {{ task_name }}-server
          dependencies: [{{ task_name }}]
          template: {{ task_name }}-server-tmp
        {% endif %} #}
    
        - name: {{ task_name }}
          {% if deps_dag[nid]|length > 0 %}
          dependencies: [{% for d in deps_dag[nid] %} {{ d['task_name'] }}{% if not loop.last %},{% endif %} {% endfor %}]
          {% endif %}
          template: {{ task_name }}-tmp
          {% if deps_dag[nid]|length > 0 or params|length > 0 %}
          arguments:
            parameters:
            {% for d in deps_dag[nid] %}
            - {name: {{ d['port_id'] }}, value: {% if d['type'] == "splitter" %}{{ '"{{item}}"' }}{% else %}{{ '"{{tasks.' }}{{ d['task_name'] }}{{ '.outputs.parameters.' }}{{ d['port_id'] }}{{'}}"'}}{% endif %}}
            {% endfor %}
            {% for p in params %}
            - {name: {{ p }}, value: {{ '"{{workflow.parameters.' }}{{ p }}{{ '}}"' }}}
            {% endfor %}
          {% for d in deps_dag[nid] %}
          {% if d['type'] == "splitter" %}
          withParam: {{ '"{{tasks.' }}{{ d['task_name'] }}{{ '.outputs.parameters.' }}{{ d['port_id'] }}{{'}}"'}}
          {% endif %}
          {% endfor %}
          {% endif %}
        {% endfor %}
    {% for nid in nodes %}
    {% set is_special_node = nodes[nid]['type'] == 'splitter' or nodes[nid]['type'] == 'merger' or nodes[nid]['type'] == 'visualizer' %}
    {% set is_splitter = nodes[nid]['type'] == 'splitter' %}
    {% set is_visualizer = nodes[nid]['type'] == 'visualizer' %}
    {% set task_name = nodes[nid]['type'] + "-" + nid[:7] if is_special_node else cells[nid]['task_name'] + "-" + nid[:7] %}
    {% set params = [] if is_special_node else cells[nid]['params'] %}
    {% set ports = nodes[nid]['ports'] %}
    {# {% if 'visualize-' in task_name %}
    - name: {{ task_name }}-server-tmp
      container:
        image: busybox
        imagePullPolicy: IfNotPresent
        command: ["/bin/bash", "-c"]
        args:
          - echo "Starting server"
    {% endif %} #}
    - name: {{ task_name }}-tmp
      {% if deps_dag[nid]|length > 0 %}
      inputs:
        parameters:
        {% for d in deps_dag[nid] %}
        - name: {{ d['port_id'] }}
        {% endfor %}
        {% for p in params %}
        - name: {{ p }}
        {% endfor %}
      {% endif %}
      outputs:
        parameters:
        {% for p in ports %}
        {% if ports[p]['type'] == 'right' %}
          - name: {{ ports[p]['id'] }}
            valueFrom:
              path: /tmp/{{ ports[p]['id'] }}.json
        {% endif %}
        {% endfor %}
      {% if is_special_node and not is_visualizer %}
      {% set special_dep = deps_dag[nid][0] %}
      script:
        image: python:alpine3.9
        imagePullPolicy: IfNotPresent
        command: [python]
        source: |
          import json
          {{ special_dep['port_id'] }} = {{ '{{inputs.parameters.' }}{{ special_dep['port_id'] }}{{ '}}' }}
          {% for p in ports %}
          {% if ports[p]['type'] == 'right' %}
          {% if is_splitter %}
          {# splitter logic #}
          list_of_lists = []
          for elem in {{special_dep['port_id']}}:
            list = [elem]
            list_of_lists.append(list)
          f_out = open("/tmp/{{ports[p]['id']}}.json", "w")
          f_out.write(json.dumps(list_of_lists))
          f_out.close()
          {% else %}
          {# Merger logic #}
          {{special_dep['port_id']}} = [item for items in {{special_dep['port_id']}} for item in json.loads(items)]
          f_out = open("/tmp/{{ports[p]['id']}}.json", "w")
          f_out.write(json.dumps({{special_dep['port_id']}}))
          f_out.close()
          {% endif %}
          {% endif %}
          {% endfor %}
      {% elif is_visualizer %}
      container:
        image: "qcdis/geotiff_viewer:v0.2.6"
        imagePullPolicy: IfNotPresent
        command: ["/bin/sh", "-c"]
        args:
          - python /app/python_scripts/main.py
            {% for d in deps_dag[nid] %}
            {% set is_from_special = d['type'] == 'splitter' or  d['type'] == 'merger' %}
            {% set stdinname = d['og_port_id'] if is_from_special else d['port_id'] %}
            {% set stdinname_base = stdinname.split('_')[0] %}
            --{{ stdinname_base }} '{{ '{{inputs.parameters.' }}{{ d['port_id'] }}{{ '}}' }}'
            {% endfor %}
            {% for p in params %}
            --{{ p }} '{{ '{{workflow.parameters.' }}{{ p }}{{ '}}' }}'
            {% endfor %}
            && npm start
      metadata:
        labels:
          app: naavre-visualizer
      {% else %}
      container:
        image: "{{ image_repo }}/{{ cells[nid]['task_name'] }}:{{ cells[nid]['image_version'] }}"
        imagePullPolicy: Always
        command: ["/bin/bash", "-c"]
        args:
        {% if 'visualize-' in cells[nid]['task_name']%}
          - source /venv/bin/activate; ipython kernel install --user; python /app/task.py
            {% for d in deps_dag[nid] %}
            {% set is_from_special = d['type'] == 'splitter' or  d['type'] == 'merger' %}
            {% set stdinname = d['og_port_id'] if is_from_special else d['port_id'] %}
            {% set stdinname_base = stdinname.split('_')[0] %}
            --{{ stdinname_base }} '{{ '{{inputs.parameters.' }}{{ d['port_id'] }}{{ '}}' }}'
            {% endfor %}
            {% for p in params %}
            --{{ p }} '{{ '{{workflow.parameters.' }}{{ p }}{{ '}}' }}'
            {% endfor %}
            --id {{' '}}{{cells[nid]['node_id']}}{{''}}{{";"}}
            jupyter execute /app/task-output.ipynb --allow-errors;
            jupyter nbconvert --no-input --execute /app/task-output.ipynb --to html;
            jupyter notebook --port 5173 --NotebookApp.ip='0.0.0.0' --NotebookApp.allow_origin='*' --NotebookApp.base_url=/naavre-visualizer-notebook
      metadata:
        labels:
          app: naavre-visualizer-notebook
        {% elif cells[nid]['kernel'] == 'ipython' %}
          - source /venv/bin/activate; python /app/task.py
            {% for d in deps_dag[nid] %}
            {% set is_from_special = d['type'] == 'splitter' or  d['type'] == 'merger' %}
            {% set stdinname = d['og_port_id'] if is_from_special else d['port_id'] %}
            {% set stdinname_base = stdinname.split('_')[0] %}
            --{{ stdinname_base }} '{{ '{{inputs.parameters.' }}{{ d['port_id'] }}{{ '}}' }}'
            {% endfor %}
            {% for p in params %}
            --{{ p }} '{{ '{{workflow.parameters.' }}{{ p }}{{ '}}' }}'
            {% endfor %}
            --id {{' '}}{{cells[nid]['node_id']}}{{''}}{{";"}}
        {% elif cells[nid]['kernel'] == 'IRkernel' %}
          - source /venv/bin/activate; Rscript /app/task.R
            {% for d in deps_dag[nid] %}
            {% set is_from_special = d['type'] == 'splitter' or  d['type'] == 'merger' %}
            {% set stdinname = d['og_port_id'] if is_from_special else d['port_id'] %}
            {% set stdinname_base = stdinname.split('_')[0] %}
            --{{ stdinname_base }} '{{ '{{inputs.parameters.' }}{{ d['port_id'] }}{{ '}}' }}'
            {% endfor %}
            {% for p in params %}
            --{{ p }} '{{ '{{workflow.parameters.' }}{{ p }}{{ '}}' }}'
            {% endfor %}
            --id {{' '}}{{cells[nid]['node_id']}}{{''}}{{";"}}
        {% endif %}
        volumeMounts:
        - name: workdir
          mountPath: /tmp/data
      {% endif %}
    {% endfor %}