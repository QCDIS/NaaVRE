apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: {{ workflow_name }}-
  labels:
    vlab_slug: {{ vlab_slug }}
spec:
    entrypoint: {{ workflow_name }}
    arguments:
      parameters:
      {% for p, value in global_params.items() %}
      - name: {{ p }}
        value: {{ value }}
      {% endfor %}
    templates:
    - name: {{ workflow_name }}
      dag:
        tasks:
        {% for nid in nodes %}
        {% set is_special_node = nodes[nid]['type'] == 'splitter' or nodes[nid]['type'] == 'merger' %}
        {% set is_splitter = nodes[nid]['type'] == 'splitter' %}
        {% set task_name =  nodes[nid]['type'] + "-" + nid[:7] if is_special_node else cells[nid]['task_name']+ "-" + nid[:7] %}
        {% set params =  [] if is_special_node else cells[nid]['params'] %}
        - name: {{ task_name }}
          {% if deps_dag[nid]|length > 0 %}
          dependencies: [{% for d in deps_dag[nid] %} {{ d['task_name'] }}{% if not loop.last %},{% endif %} {% endfor %}]
          {% endif %}
          template: {{ task_name }}-tmp
          {% if deps_dag[nid]|length > 0 or params|length > 0 %}
          arguments:
            parameters:
            {% for d in deps_dag[nid] %}
            - {name: {{ d['port_id'] }}, value: {% if d['type'] == "splitter" %}{{ '"{{item}}"' }}{% else %}{{ '"{{tasks.' }}{{ d['task_name'] }}{{ '.outputs.parameters.' }}{{ d['port_id'] }}{{'}}"'}}{% endif %}}
            {% endfor %}
            {% for p in params %}
            - {name: {{ p }}, value: {{ '"{{workflow.parameters.' }}{{ p }}{{ '}}"' }}}
            {% endfor %}
          {% for d in deps_dag[nid] %}
          {% if d['type'] == "splitter" %}
          withParam: {{ '"{{tasks.' }}{{ d['task_name'] }}{{ '.outputs.parameters.' }}{{ d['port_id'] }}{{'}}"'}}
          {% endif %}
          {% endfor %}
          {% endif %}
        {% endfor %}

    {% for nid in nodes %}
    {% set is_special_node = nodes[nid]['type'] == 'splitter' or nodes[nid]['type'] == 'merger' %}
    {% set is_splitter = nodes[nid]['type'] == 'splitter' %}
    {% set task_name = nodes[nid]['type'] + "-" + nid[:7] if is_special_node else cells[nid]['task_name'] + "-" + nid[:7] %}
    {% set params = [] if is_special_node else cells[nid]['params'] %}
    {% set ports = nodes[nid]['ports'] %}
    - name: {{ task_name }}-tmp
      {% if deps_dag[nid]|length > 0 %}
      inputs:
        parameters:
        {% for d in deps_dag[nid] %}
        - name: {{ d['port_id'] }}
        {% endfor %}
        {% for p in params %}
        - name: {{ p }}
        {% endfor %}
      {% endif %}
      outputs:
        parameters:
        {% for p in ports %}
        {% if ports[p]['type'] == 'right' %}
          - name: {{ ports[p]['id'] }}
            valueFrom:
              path: /tmp/{{ ports[p]['id'] }}.json
        {% endif %}
        {% endfor %}
      {% if is_special_node %}
        {% set special_dep = deps_dag[nid][0] %}
      script:
        image: python:alpine3.9
        command: [python]
        source: |
          import json
          {{ special_dep['port_id'] }} = {{ '{{inputs.parameters.' }}{{ special_dep['port_id'] }}{{ '}}' }}
          {% for p in ports %}
          {% if ports[p]['type'] == 'right' %}
          {% if is_splitter %}
          {# splitter logic #}
          list_of_lists = []
          for elem in {{special_dep['port_id']}}:
            list = [elem]
            list_of_lists.append(list)
          f_out = open("/tmp/{{ports[p]['id']}}.json", "w")
          f_out.write(json.dumps(list_of_lists))
          f_out.close()
          {% else %}
          {# Merger logic #}
          f_out = open("/tmp/{{ports[p]['id']}}.json", "w")
          f_out.write(json.dumps({{special_dep['port_id']}}))
          f_out.close()
          {% endif %}
           {% endif %}
          {% endfor %}
      {% else %}
      container:
        image: "{{ image_repo }}/{{ cells[nid]['task_name'] }}"
        command: ["/bin/bash", "-c"]
        args:
          - source /venv/bin/activate; python {{ cells[nid]['task_name'] }}.py
            {% for d in deps_dag[nid] %}
            {% set is_from_special = d['type'] == 'splitter' or  d['type'] == 'merger' %}
            {% set stdinname = d['og_port_id'] if is_from_special else d['port_id'] %}
            {% set stdinname_base = stdinname.split('_')[0] %}
            --{{ stdinname_base }}{{ ' "{{inputs.parameters.' }}{{ d['port_id'] }}{{ '}}"' }}
            {% endfor %}
            {% for p in params %}
            --{{ p }}{{ ' "{{workflow.parameters.' }}{{ p }}{{ '}}"' }}
            {% endfor %}
            --id {{'"'}}{{cells[nid]['node_id']}}{{'"'}}{{";"}}
      {% endif %}
    {% endfor %}