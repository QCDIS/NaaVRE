{% if deps|length >0 %}
{% for d in deps %}
{{ d }}
{% endfor %}
{% endif %}
{% if cell.inputs|length > 0 or cell.params|length > 0%}
import argparse
arg_parser = argparse.ArgumentParser()
from os.path import exists
import json
inputs_path = '/tmp/inputs.json'
inputs_exists = exists(inputs_path)

if inputs_exists:
    with open(inputs_path) as json_file:
        try:
            inputs = json.load(json_file)
        except JSONDecodeError:
            json_file.close()
            f = open(inputs_path, "r")
            inputs = f.readlines()[0].strip()

{% for in_var in cell.inputs|sort %}
if inputs:
    if 'laz_files' in inputs:
        laz_files = inputs['laz_files']
    else:
        laz_files = inputs
else:
    arg_parser.add_argument('--{{ in_var }}', action='store' {% if types[in_var] != 'list' %}, type={{ types[in_var] }} {% endif %}, required='True', dest='{{ in_var }}')
{% endfor %}

{% for param in cell.params|sort %}
arg_parser.add_argument('--{{ param }}', action='store', type={{ types[param] }}, required='True', dest='{{ param }}')
{% endfor %}

args = arg_parser.parse_args()
{% for in_var in cell.inputs|sort %}
if not inputs_exists:
    {{ in_var }} = args.{{ in_var }}
{% endfor %}

{% for param in cell.params|sort %}
{{ param }} = args.{{ param }}
{% endfor %}
{% endif %}

{% for c in confs %}
{{ c }}
{% endfor %}

{{ cell.original_source }}

{% if cell.outputs|length > 0 %}
import json
{% if cell.outputs|length == 1 and types[cell.outputs.0] == 'list' %}
with open('/tmp/outputs.json', 'w') as f:
    json.dump({{cell.outputs.0 }}, f)

{% else %}
outputs = {}
{% for out_var in cell.outputs|sort %}
outputs['{{ out_var }}'] = {{ out_var }}
{% endfor %}
with open('/tmp/outputs.json', 'w') as f:
    json.dump(outputs, f)
{% endif %}
{% endif %}