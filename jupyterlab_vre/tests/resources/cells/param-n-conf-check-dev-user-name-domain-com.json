{
    "all_inputs": [],
    "base_image": {
        "build": "ghcr.io/qcdis/naavre/naavre-cell-build-python:v0.9",
        "runtime": "ghcr.io/qcdis/naavre/naavre-cell-runtime-python:v0.9"
    },
    "chart_obj": {
        "hovered": {},
        "links": {},
        "nodes": {
            "ca605ee": {
                "id": "ca605ee",
                "ports": {},
                "position": {
                    "x": 35,
                    "y": 15
                },
                "properties": {
                    "inputs": [],
                    "og_node_id": "ca605ee",
                    "outputs": [],
                    "params": [
                        "param_string",
                        "param_string_with_comment",
                        "param_int",
                        "param_float",
                        "param_list_int",
                        "param_list_str"
                    ],
                    "title": "Param-n-conf-check-dev-user-name-domain-com",
                    "vars": []
                },
                "type": "input-output"
            }
        },
        "offset": {
            "x": 0,
            "y": 0
        },
        "scale": 1,
        "selected": {}
    },
    "confs": {},
    "container_source": "\nimport argparse\narg_parser = argparse.ArgumentParser()\n\narg_parser.add_argument('--id', action='store',\n                        type=str, required=True, dest='id')\n\n\narg_parser.add_argument('--param_float', action='store',\n                        type=float, required=True, dest='param_float')\narg_parser.add_argument('--param_int', action='store',\n                        type=int, required=True, dest='param_int')\narg_parser.add_argument('--param_list_int', action='store',\n                        type=str, required=True, dest='param_list_int')\narg_parser.add_argument('--param_list_str', action='store',\n                        type=str, required=True, dest='param_list_str')\narg_parser.add_argument('--param_string', action='store',\n                        type=str, required=True, dest='param_string')\narg_parser.add_argument('--param_string_with_comment', action='store',\n                        type=str, required=True, dest='param_string_with_comment')\n\nargs = arg_parser.parse_args()\nprint(args)\n\nid = args.id\n\n\nparam_float = args.param_float\nparam_int = args.param_int\nparam_list_int = args.param_list_int\nparam_list_str = args.param_list_str\nparam_string = args.param_string\nparam_string_with_comment = args.param_string_with_comment\n\n\nprint('param_string: ' + str(param_string)+' type: '+str(type(param_string)))\nprint('param_string_with_comment: ' + str(param_string_with_comment) +\n      ' type: '+str(type(param_string_with_comment)))\nprint('param_int: ' + str(param_int)+' type: '+str(type(param_int)))\nprint('param_float: ' + str(param_float)+' type: '+str(type(param_float)))\nprint('param_list_int: ' + str(param_list_int) +\n      ' type: '+str(type(param_list_int)))\nprint('param_list_str: ' + str(param_list_str) +\n      ' type: '+str(type(param_list_str)))\n\n\ncheck = param_string\nif not isinstance(check, str):\n    print('param_string is not a string. It is a ' + str(type(check)))\n    exit(1)\ncheck = param_string_with_comment\nif not isinstance(check, str):\n    print('param_string_with_comment is not a string. It is a ' + str(type(check)))\n    exit(1)\ncheck = param_int\nif not isinstance(check, int):\n    print('param_int is not an int. It is a ' + str(type(check)))\n    exit(1)\ncheck = param_float\nif not isinstance(check, float):\n    print('param_float is not a float. It is a ' + str(type(check)))\n    exit(1)\ncheck = param_list_int\nif not isinstance(check, list):\n    print('param_list_int is not a list. It is a ' + str(type(check)))\n    exit(1)\nfor i in param_list_int:\n    if not isinstance(i, int):\n        print('param_list_int contains a non-int value: ' + str(i))\n        exit(1)\ncheck = param_list_str\nif not isinstance(check, list):\n    print('param_list_str is not a list. It is a ' + str(type(check)))\n    exit(1)\nfor i in param_list_str:\n    if not isinstance(i, str):\n        print('param_list_str contains a non-str value: ' + str(i))\n        exit(1)\n",
    "dependencies": [],
    "image_version": "aea5ef9",
    "inputs": [],
    "kernel": "ipython",
    "node_id": "ca605ee",
    "notebook_dict": {
        "cells": [
            {
                "cell_type": "code",
                "execution_count": 13,
                "id": "3c6969b8-ffd7-4f09-bb9a-01d1e01a834a",
                "metadata": {},
                "outputs": [
                    {
                        "name": "stdout",
                        "output_type": "stream",
                        "text": "param_string: param_string value type: <class 'str'>\nparam_string_with_comment: param_string value type: <class 'str'>\nparam_int: 1 type: <class 'int'>\nparam_float: 1.1 type: <class 'float'>\nparam_list_int: [1, 2, 3] type: <class 'list'>\nparam_list_str: ['1', 'two', '3'] type: <class 'list'>\n"
                    }
                ],
                "source": "# Param n conf check\n\n        \nprint('param_string: ' + str(param_string)+' type: '+str(type(param_string)))\nprint('param_string_with_comment: ' + str(param_string_with_comment)+' type: '+str(type(param_string_with_comment)))\nprint('param_int: ' + str(param_int)+' type: '+str(type(param_int)))\nprint('param_float: ' + str(param_float)+' type: '+str(type(param_float)))\nprint('param_list_int: ' + str(param_list_int)+' type: '+str(type(param_list_int)))\nprint('param_list_str: ' + str(param_list_str)+' type: '+str(type(param_list_str)))\n\n\ncheck = param_string\nif not isinstance(check, str):\n    print('param_string is not a string. It is a ' + str(type(check)))\n    exit(1)\ncheck = param_string_with_comment\nif not isinstance(check, str):\n    print('param_string_with_comment is not a string. It is a ' + str(type(check)))\n    exit(1)\ncheck = param_int\nif not isinstance(check, int):\n    print('param_int is not an int. It is a ' + str(type(check)))\n    exit(1)\ncheck = param_float\nif not isinstance(check, float):\n    print('param_float is not a float. It is a ' + str(type(check)))\n    exit(1)\ncheck = param_list_int\nif not isinstance(check, list):\n    print('param_list_int is not a list. It is a ' + str(type(check)))\n    exit(1)\nfor i in param_list_int:\n    if not isinstance(i, int):\n        print('param_list_int contains a non-int value: ' + str(i))\n        exit(1)\ncheck = param_list_str\nif not isinstance(check, list):\n    print('param_list_str is not a list. It is a ' + str(type(check)))\n    exit(1)\nfor i in param_list_str:\n    if not isinstance(i, str):\n        print('param_list_str contains a non-str value: ' + str(i))\n        exit(1)"
            }
        ],
        "metadata": {
            "kernelspec": {
                "display_name": "python3",
                "language": "python3",
                "name": "python3"
            },
            "language_info": {
                "codemirror_mode": {
                    "name": "ipython",
                    "version": 3
                },
                "file_extension": ".py",
                "mimetype": "text/x-python",
                "name": "python",
                "nbconvert_exporter": "python",
                "pygments_lexer": "ipython3",
                "version": "3.12.1"
            }
        },
        "nbformat": 4,
        "nbformat_minor": 5
    },
    "original_source": "\n        \nprint('param_string: ' + str(param_string)+' type: '+str(type(param_string)))\nprint('param_string_with_comment: ' + str(param_string_with_comment)+' type: '+str(type(param_string_with_comment)))\nprint('param_int: ' + str(param_int)+' type: '+str(type(param_int)))\nprint('param_float: ' + str(param_float)+' type: '+str(type(param_float)))\nprint('param_list_int: ' + str(param_list_int)+' type: '+str(type(param_list_int)))\nprint('param_list_str: ' + str(param_list_str)+' type: '+str(type(param_list_str)))\n\n\ncheck = param_string\nif not isinstance(check, str):\n    print('param_string is not a string. It is a ' + str(type(check)))\n    exit(1)\ncheck = param_string_with_comment\nif not isinstance(check, str):\n    print('param_string_with_comment is not a string. It is a ' + str(type(check)))\n    exit(1)\ncheck = param_int\nif not isinstance(check, int):\n    print('param_int is not an int. It is a ' + str(type(check)))\n    exit(1)\ncheck = param_float\nif not isinstance(check, float):\n    print('param_float is not a float. It is a ' + str(type(check)))\n    exit(1)\ncheck = param_list_int\nif not isinstance(check, list):\n    print('param_list_int is not a list. It is a ' + str(type(check)))\n    exit(1)\nfor i in param_list_int:\n    if not isinstance(i, int):\n        print('param_list_int contains a non-int value: ' + str(i))\n        exit(1)\ncheck = param_list_str\nif not isinstance(check, list):\n    print('param_list_str is not a list. It is a ' + str(type(check)))\n    exit(1)\nfor i in param_list_str:\n    if not isinstance(i, str):\n        print('param_list_str contains a non-str value: ' + str(i))\n        exit(1)",
    "outputs": [],
    "param_values": {
        "param_float": "1.1",
        "param_int": "1",
        "param_list_int": "[1, 2, 3]",
        "param_list_str": "['1', 'two', '3']",
        "param_string": "param_string value",
        "param_string_with_comment": "param_string value"
    },
    "params": [
        "param_string",
        "param_string_with_comment",
        "param_int",
        "param_float",
        "param_list_int",
        "param_list_str"
    ],
    "task_name": "param-n-conf-check-dev-user-name-domain-com",
    "title": "Param-n-conf-check-dev-user-name-domain-com",
    "types": {
        "param_float": "float",
        "param_int": "int",
        "param_list_int": "list",
        "param_list_str": "list",
        "param_string": "str",
        "param_string_with_comment": "str"
    }
}