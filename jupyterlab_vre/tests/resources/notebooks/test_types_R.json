 {
    "save": false,
    "kernel": "IRkernel",
    "cell_index": 2,
    "notebook": {
        "metadata": {
            "kernelspec": {
                "display_name": "R [conda env:jupyterlab] *",
                "language": "R",
                "name": "conda-env-jupyterlab-r"
            },
            "language_info": {
                "codemirror_mode": "r",
                "file_extension": ".r",
                "mimetype": "text/x-r-source",
                "name": "R",
                "pygments_lexer": "r",
                "version": "4.3.3"
            }
        },
        "nbformat_minor": 5,
        "nbformat": 4,
        "cells": [
            {
                "cell_type": "code",
                "source": "param_string <- 'param_string value'\nparam_string_with_comment <- 'param_string value'  # comment\nparam_int <- 1\nparam_float <- 1.1\nparam_list_int <- list(1, 2, 3)\nparam_list_str <- list(\"list_str\", \"space in elem\", \"3\")\n\nconf_string <- 'param_string value'\nconf_string_with_comment <- 'param_string value'  # comment\nconf_int <- 1\nconf_float <- 1.1\nconf_list_int <- list(1, 2, 3)\nconf_list_str <- list(\"list_str\", \"space in elem\", \"3\")",
                "metadata": {
                    "trusted": true
                },
                "execution_count": 3,
                "outputs": [],
                "id": "6a964825-08cf-454b-a247-c27b79c6bcf2"
            },
            {
                "cell_type": "code",
                "source": "# R vars types\n\n# ---\n# NaaVRE:\n#  cell:\n#   outputs:\n#    - var_string: String\n#    - var_string_with_comment: String\n#    - var_int: Integer\n#    - var_float: Float\n#    - var_list_int: List\n#    - var_list_str: List\n# ...\n\nvar_string <- 'var_string value'\nvar_string_with_comment <- 'var_string value'  # comment\nvar_int <- 1\nvar_float <- 1.1\nvar_list_int <- list(1, 2, 3)\nvar_list_str <- list(\"list_str\", \"space in elem\", \"3\")\nprint(class(var_list_int))",
                "metadata": {
                    "trusted": true
                },
                "execution_count": 4,
                "outputs": [
                    {
                        "name": "stdout",
                        "output_type": "stream",
                        "text": "[1] \"list\"\n"
                    }
                ],
                "id": "62acca7c-1f91-4266-bb7e-23d85a3d7157"
            },
            {
                "cell_type": "code",
                "source": "# R Check var types\n\n# ---\n# NaaVRE:\n#  cell:\n#   params:\n#    - param_string: \n#       type: String\n#       default_value: \"param_string value\"\n#    - param_string_with_comment:\n#       type: String\n#       default_value: \"param_string value\"\n#    - param_int: \n#       type: Integer\n#       default_value: 1\n#    - param_float: \n#       type: Float\n#       default_value: 1.1\n#    - param_list_int:\n#       type: List\n#       default_value: [1, 2, 3]\n#    - param_list_str: \n#       type: List\n#       default_value: ['list_str', 'space in elem', '3']\n#   inputs:\n#    - var_string: String\n#    - var_string_with_comment: String\n#    - var_int: Integer\n#    - var_float: Float\n#    - var_list_int: List\n#    - var_list_str: List\n#   confs:\n#    - conf_string:\n#       assignation: \"conf_string = 'param_string value'\"\n#    - conf_string_with_comment:\n#       assignation: \"conf_string_with_comment = 'param_string value'\"\n#    - conf_int:\n#       assignation: \"conf_int = 1\"\n#    - conf_float:\n#       assignation: \"conf_float = 1.1\"\n#    - conf_list_int:\n#       assignation: \"conf_list_int = [1, 2, 3]\"\n#    - conf_list_str:\n#       assignation: \"conf_list_str = ['list_str', 'space in elem', '3']\"\n# ...\n\nprint(paste('conf_string: ', conf_string, ' type: ', class(conf_string)))\nprint(paste('conf_string_with_comment: ', conf_string_with_comment, ' type: ', class(conf_string_with_comment)))\nprint(paste('conf_int: ', conf_int, ' type: ', class(conf_int)))\nprint(paste('conf_float: ', conf_float, ' type: ', class(conf_float)))\nprint(paste('conf_list_int: ', toString(conf_list_int), ' type: ', class(conf_list_int)))\nprint(paste('conf_list_str: ', toString(conf_list_str), ' type: ', class(conf_list_str)))\n\nprint(paste('param_string: ', param_string, ' type: ', class(param_string)))\nprint(paste('param_string_with_comment: ', param_string_with_comment, ' type: ', class(param_string_with_comment)))\nprint(paste('param_int: ', param_int, ' type: ', class(param_int)))\nprint(paste('param_float: ', param_float, ' type: ', class(param_float)))\nprint(paste('param_list_int: ', toString(param_list_int), ' type: ', class(param_list_int)))\nprint(paste('param_list_str: ', toString(param_list_str), ' type: ', class(param_list_str)))\n\nprint(paste('var_string: ', var_string, ' type: ', class(var_string)))\nprint(paste('var_string_with_comment: ', var_string_with_comment, ' type: ', class(var_string_with_comment)))\nprint(paste('var_int: ', var_int, ' type: ', class(var_int)))\nprint(paste('var_float: ', var_float, ' type: ', class(var_float)))\nprint(paste('var_list_int: ', toString(var_list_int), ' type: ', class(var_list_int)))\nprint(paste('var_list_str: ', toString(var_list_str), ' type: ', class(var_list_str)))\n\ncheck_type <- function(var, expected_types) {\n  \n  # Check if the variable matches any of the expected types\n  if (!any(sapply(expected_types, function(x) inherits(var, x)))) {\n    stop(paste('Variable is not of the expected types:', paste(expected_types, collapse = ', '),\n               '. It is a', class(var)))\n  }\n  \n  # If the expected types include 'list', check if the variable is iterable\n  if ('list' %in% expected_types) {\n    if (!is.list(var) && !is.vector(var)) {\n      stop(paste('Variable', var, 'is not iterable.'))\n    }\n  }\n}\n\ncheck_type(conf_string, c(c(\"character\")))\ncheck_type(conf_string_with_comment, c(\"character\"))\ncheck_type(conf_int, \"numeric\")\ncheck_type(conf_float, \"numeric\")\nif (is.numeric(conf_list_int)) {\n  conf_list_int <- list(conf_list_int)\n}\n\ncheck_type(conf_list_int, c(\"list\"))\nif (is.character(conf_list_str)) {\n  conf_list_str <- list(conf_list_str)\n}\ncheck_type(conf_list_str, c(\"list\"))\n\ncheck_type(param_string, c(\"character\"))\ncheck_type(param_string_with_comment, c(\"character\"))\ncheck_type(param_int, c(\"numeric\", \"integer\"))\ncheck_type(param_float, c(\"numeric\", \"float\"))\nif (is.numeric(param_list_int)) {\n  param_list_int <- list(param_list_int)\n}\ncheck_type(param_list_int, c(\"list\"))\ncheck_type(conf_list_int, c(\"list\"))\nif (is.character(param_list_str)) {\n  param_list_str <- list(param_list_str)\n}\ncheck_type(param_list_str, c(\"list\"))\n\ncheck_type(var_string, c(\"character\"))\ncheck_type(var_string_with_comment, c(\"character\"))\ncheck_type(var_int, c(\"numeric\", \"integer\"))\ncheck_type(var_float, c(\"numeric\", \"float\"))\nif (is.numeric(var_list_int)) {\n  var_list_int <- list(var_list_int)\n}\ncheck_type(var_list_int, c(\"list\"))\n\nif (is.character(var_list_str)) {\n  var_list_str <- list(var_list_str)\n}\ncheck_type(var_list_str, c(\"list\"))\n\nprint('All vars are of the correct type')\n\ndone <- TRUE",
                "metadata": {
                    "trusted": true
                },
                "execution_count": 5,
                "outputs": [
                    {
                        "name": "stdout",
                        "output_type": "stream",
                        "text": "[1] \"conf_string:  param_string value  type:  character\"\n[1] \"conf_string_with_comment:  param_string value  type:  character\"\n[1] \"conf_int:  1  type:  numeric\"\n[1] \"conf_float:  1.1  type:  numeric\"\n[1] \"conf_list_int:  1, 2, 3  type:  list\"\n[1] \"conf_list_str:  list_str, space in elem, 3  type:  list\"\n[1] \"param_string:  param_string value  type:  character\"\n[1] \"param_string_with_comment:  param_string value  type:  character\"\n[1] \"param_int:  1  type:  numeric\"\n[1] \"param_float:  1.1  type:  numeric\"\n[1] \"param_list_int:  1, 2, 3  type:  list\"\n[1] \"param_list_str:  list_str, space in elem, 3  type:  list\"\n[1] \"var_string:  var_string value  type:  character\"\n[1] \"var_string_with_comment:  var_string value  type:  character\"\n[1] \"var_int:  1  type:  numeric\"\n[1] \"var_float:  1.1  type:  numeric\"\n[1] \"var_list_int:  1, 2, 3  type:  list\"\n[1] \"var_list_str:  list_str, space in elem, 3  type:  list\"\n[1] \"All vars are of the correct type\"\n"
                    }
                ],
                "id": "c7bcfe5c-5b6b-4fff-8c04-07c20f894363"
            },
            {
                "cell_type": "code",
                "source": "",
                "metadata": {
                    "trusted": true
                },
                "execution_count": null,
                "outputs": [],
                "id": "2646190e-e38f-472f-b3f5-2fe2e52b5636"
            }
        ]
    }
}
